#worker.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: vote
  labels:
    app: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
      - name: votingworker
        image: dockersamples/examplevotingapp_worker
        ports:
        - containerPort: 80



#result-service.yaml
apiVersion: v1            # Correct API version
kind: Service
metadata:
  name: result
  namespace: vote
spec:
  type: NodePort           # NodePort service
  selector:
    app: result            # Must match result deployment labels
  ports:
    - port: 8081           # Service port
      targetPort: 80       # Container port
      nodePort: 31001      # NodePort as required


#result-
deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: result
  namespace: vote
  labels:
    app: result
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
      - name: result
        image: dockersamples/examplevotingapp_result
        ports:
        - containerPort: 80

#redis service & deployment
apiVersion: v1          # Correct API version for Service
kind: Service
metadata:
  name: redis
  namespace: vote
spec:
  type: ClusterIP        # Internal service
  selector:
    app: redis           # Must match Redis Deployment label
  ports:
    - port: 6379         # Service port
      targetPort: 6379   # Container port



apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: vote
  labels:
    app: redis-deployment
spec:
  selector:
    matchLabels:
      app: redis-deployment
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-deployment
    spec:
      volumes:
        - name: redis-data
          emptyDir: {}
      containers:
        - image: redis:alpine
          name: redis-deployment
          volumeMounts:
            - name: redis-data
              mountPath: /data


db-service.yaml db-deployment.yaml
apiVersion: v1          # Correct API version for Service
kind: Service
metadata:
  name: db
  namespace: vote
  labels:
    app: dbservice
spec:
  type: ClusterIP
  selector:
    app: db-deployment     # Must match the Deployment labels
  ports:
    - port: 5432           # Service port
      targetPort: 5432     # Container port

apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: vote
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      volumes:
      - name: db-data
        emptyDir: {}
      containers:
      - name: postgres-db
        image: postgres:15-alpine
        env:
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/postgresql/data
        ports:
        - containerPort: 5432




vote-service.yaml vote-deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: vote
  namespace: vote
  labels:
    app: vote
spec:
  type: NodePort               # Required for NodePort service
  selector:
    app: vote
  ports:
    - port: 8080
      targetPort: 80
      nodePort: 31000

apiVersion: apps/v1       # Correct API version for Deployment
kind: Deployment
metadata:
  name: vote-deployment
  namespace: vote
  labels:
    app: vote-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vote-deployment
  template:
    metadata:
      labels:
        app: vote-deployment
    spec:
      containers:
      - name: vote
        image: dockersamples/examplevotingapp_vote